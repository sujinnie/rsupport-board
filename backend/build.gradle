plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1' // swagger 호환 떄문에 3.5.0 -> 3.3.1
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.rsupport'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.18.3"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // dummy data
    implementation 'net.datafaker:datafaker:1.9.0'

    // queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // spring data cache + redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310' // JavaTimeModule
    implementation 'com.fasterxml.jackson.core:jackson-databind' // Json객체 직렬화/역직렬화, 복잡한 DTO 캐싱 시 편리

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Junit, AssertJ 등 포함..
    testImplementation 'com.h2database:h2'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
}

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
        events "started", "passed", "skipped", "failed"
    }
}

// queryDsl 빌드 옵션
def generatedDir = 'src/main/generated'

clean {
    delete file (generatedDir)
}
// 여기까지
